<?php

require_once dirname(__FILE__) . '/../../../../classes/modules/recurringEventsModule/recurrenceRuleParser.php';

/**
 * Test class for recurrenceRuleParser.
 * Generated by PHPUnit on 2011-10-22 at 18:03:12.
 */
class recurrenceRuleParserTest extends PHPUnit_Framework_TestCase {

	protected $parser;
	
	protected $dtstart = "20111014T200000";
	protected $startTime = "20111014T200000";
	protected $endTime = "20111031T200000";
	protected $endTimeInfinity;

	protected function setUp() {
		date_default_timezone_set('UTC');
		
		$this->endTimeInfinity = "@".PHP_INT_MAX;
		
		$this->parser = new recurrenceRuleParser;
                $this->parser->outputFormat = 'c';
	}

	protected function tearDown() {
		$this->parser = NULL;
	}
	
	
	/*
	 * DAILY
	 */
	
	public function testDaily() {
		$rule = "FREQ=DAILY;INTERVAL=1";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTime);
		
		$expected = "2011-10-15T20:00:00+00:00_2011-10-16T20:00:00+00:00_2011-10-17T20:00:00+00:00_2011-10-18T20:00:00+00:00_2011-10-19T20:00:00+00:00_2011-10-20T20:00:00+00:00_2011-10-21T20:00:00+00:00_2011-10-22T20:00:00+00:00_2011-10-23T20:00:00+00:00_2011-10-24T20:00:00+00:00_2011-10-25T20:00:00+00:00_2011-10-26T20:00:00+00:00_2011-10-27T20:00:00+00:00_2011-10-28T20:00:00+00:00_2011-10-29T20:00:00+00:00_2011-10-30T20:00:00+00:00_2011-10-31T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testDailyIntervalCount() {
		$rule = "FREQ=DAILY;INTERVAL=1;COUNT=4";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-15T20:00:00+00:00_2011-10-16T20:00:00+00:00_2011-10-17T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testDailyCount() {
		$rule = "FREQ=DAILY;COUNT=4";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-15T20:00:00+00:00_2011-10-16T20:00:00+00:00_2011-10-17T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testDailyInterval2Count() {
		$rule = "FREQ=DAILY;INTERVAL=2;COUNT=6";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-16T20:00:00+00:00_2011-10-18T20:00:00+00:00_2011-10-20T20:00:00+00:00_2011-10-22T20:00:00+00:00_2011-10-24T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
        public function testDailyInterval3Count() {
		$rule = "FREQ=DAILY;INTERVAL=3;COUNT=4";
		$this->parser->parseRule($rule, "20111206T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-12-09T20:00:00+00:00_2011-12-12T20:00:00+00:00_2011-12-15T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testDailyUntil() {
		$rule = "FREQ=DAILY;UNTIL=20111019T225959Z";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-15T20:00:00+00:00_2011-10-16T20:00:00+00:00_2011-10-17T20:00:00+00:00_2011-10-18T20:00:00+00:00_2011-10-19T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testDailyIntervalUntil() {
		$rule = "FREQ=DAILY;INTERVAL=2;UNTIL=20111019T215959Z";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-16T20:00:00+00:00_2011-10-18T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function test2DailyIntervalUntil() {
		$rule = "FREQ=DAILY;INTERVAL=2;UNTIL=20111020T215959Z";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-16T20:00:00+00:00_2011-10-18T20:00:00+00:00_2011-10-20T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	/*
	 * WEEKLY
	 */
	
	public function testWeeklyCount() {
		$rule = "FREQ=WEEKLY;COUNT=4";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-21T20:00:00+00:00_2011-10-28T20:00:00+00:00_2011-11-04T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testWeeklyByDayWkstMo() {
		$rule = "FREQ=WEEKLY;INTERVAL=1;COUNT=7;BYDAY=MO,FR;WKST=MO";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-17T20:00:00+00:00_2011-10-21T20:00:00+00:00_2011-10-24T20:00:00+00:00_2011-10-28T20:00:00+00:00_2011-10-31T20:00:00+00:00_2011-11-04T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testWeeklyByDayWithoutWkst() {
		$rule = "FREQ=WEEKLY;INTERVAL=1;COUNT=7;BYDAY=MO,FR";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-17T20:00:00+00:00_2011-10-21T20:00:00+00:00_2011-10-24T20:00:00+00:00_2011-10-28T20:00:00+00:00_2011-10-31T20:00:00+00:00_2011-11-04T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testWeeklyByDayUntil() {
		$rule = "FREQ=WEEKLY;INTERVAL=1;UNTIL=20111104T215959Z;BYDAY=MO,FR;WKST=MO";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-17T20:00:00+00:00_2011-10-21T20:00:00+00:00_2011-10-24T20:00:00+00:00_2011-10-28T20:00:00+00:00_2011-10-31T20:00:00+00:00_2011-11-04T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
        public function testWeeklyByDayCount() {
		$rule = "FREQ=WEEKLY;INTERVAL=3;COUNT=4;BYDAY=TU,WE";
		$this->parser->parseRule($rule, "20111207T200000", "20111207T000000", $this->endTimeInfinity);
		
		$expected = "2011-12-27T20:00:00+00:00_2011-12-28T20:00:00+00:00_2012-01-17T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	
	/*
	 * MONTHLY
	 */
	
	public function testMonthly() {
		$rule = "FREQ=MONTHLY";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, "20120114T235959" );
		
		$expected = "2011-11-14T20:00:00+00:00_2011-12-14T20:00:00+00:00_2012-01-14T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyIntervalCount() {
		$rule = "FREQ=MONTHLY;INTERVAL=2;COUNT=4";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-12-14T20:00:00+00:00_2012-02-14T20:00:00+00:00_2012-04-14T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
        public function testMonthlyIntervalCount2() {
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4";
		$this->parser->parseRule($rule, "20111031T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-12-31T20:00:00+00:00_2012-01-31T20:00:00+00:00_2012-03-31T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
        public function testMonthlyIntervalCount3() {
		$rule = "FREQ=MONTHLY;INTERVAL=2;COUNT=4";
		$this->parser->parseRule($rule, "20111031T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-12-31T20:00:00+00:00_2012-08-31T20:00:00+00:00_2012-10-31T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
         public function testMonthlyIntervalCount4() {
		$rule = "FREQ=MONTHLY;INTERVAL=2;COUNT=4;BYSETPOS=-1;BYDAY=SU,MO,TU,WE,TH,FR,SA";
		$this->parser->parseRule($rule, "20120229T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2012-04-30T20:00:00+00:00_2012-06-30T20:00:00+00:00_2012-08-31T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyIntervalUntil() {
		$rule = "FREQ=MONTHLY;INTERVAL=1;UNTIL=20120114T225959Z";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-11-14T20:00:00+00:00_2011-12-14T20:00:00+00:00_2012-01-14T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByMonthDayCount() {
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYMONTHDAY=1,14";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-11-01T20:00:00+00:00_2011-11-14T20:00:00+00:00_2011-12-01T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByMonthDayCount31() {
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYMONTHDAY=14,31";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-10-31T20:00:00+00:00_2011-11-14T20:00:00+00:00_2011-12-14T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByDayOrdinal() {
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYDAY=2FR";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-11-11T20:00:00+00:00_2011-12-09T20:00:00+00:00_2012-01-13T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByDayBySetPos() {
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYSETPOS=1;BYDAY=SU,MO,TU,WE,TH,FR,SA";
		$this->parser->parseRule($rule, "20111001T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-11-01T20:00:00+00:00_2011-12-01T20:00:00+00:00_2012-01-01T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByDayBySetPos2() {
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYSETPOS=2;BYDAY=SU,MO,TU,WE,TH,FR,SA";
		$this->parser->parseRule($rule, "20111001T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-11-02T20:00:00+00:00_2011-12-02T20:00:00+00:00_2012-01-02T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByDayBySetPosMinus1() {
		//last day in month
		
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYSETPOS=-1;BYDAY=SU,MO,TU,WE,TH,FR,SA";
		$this->parser->parseRule($rule, "20111031T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-11-30T20:00:00+00:00_2011-12-31T20:00:00+00:00_2012-01-31T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByDayBySetPosWeekday() {		
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYSETPOS=1;BYDAY=MO,TU,WE,TH,FR";
		$this->parser->parseRule($rule, "20110905T200000", "20110905T200000", $this->endTimeInfinity);
		
		$expected = "2011-10-03T20:00:00+00:00_2011-11-01T20:00:00+00:00_2011-12-01T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
        public function testMonthlyByDayBySetPosWeekday2() {		
		$rule = "FREQ=MONTHLY;INTERVAL=3;COUNT=4;BYSETPOS=-1;BYDAY=MO,TU,WE,TH,FR";
		$this->parser->parseRule($rule, "20110930T200000", "20110905T200000", $this->endTimeInfinity);
		
		$expected = "2011-12-30T20:00:00+00:00_2012-03-30T20:00:00+00:00_2012-06-29T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
        public function testMonthlyByDayBySetPosWeekday3() {		
		$rule = "FREQ=MONTHLY;INTERVAL=2;COUNT=4;BYSETPOS=3;BYDAY=MO,TU,WE,TH,FR";
		$this->parser->parseRule($rule, "20111103T200000", "20110904T200000", $this->endTimeInfinity);
		
		$expected = "2012-01-04T20:00:00+00:00_2012-03-05T20:00:00+00:00_2012-05-03T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testMonthlyByMonthByDayBySetPosWeekday() {		
		$rule = "FREQ=MONTHLY;INTERVAL=1;COUNT=4;BYMONTH=1,10;BYSETPOS=-1;BYDAY=SU,MO,TU,WE,TH,FR,SA";
		$this->parser->parseRule($rule, "20111031T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2012-01-31T20:00:00+00:00_2012-10-31T20:00:00+00:00_2013-01-31T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	
	
	
	/*
	 * YEARLY
	 */
	
	public function testYearly() {		
		$rule = "FREQ=YEARLY;INTERVAL=1;COUNT=4";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2012-10-14T20:00:00+00:00_2013-10-14T20:00:00+00:00_2014-10-14T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testYearlyByMonth() {		
		$rule = "FREQ=YEARLY;INTERVAL=1;COUNT=4;BYMONTH=1,10";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2012-01-14T20:00:00+00:00_2012-10-14T20:00:00+00:00_2013-01-14T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
	
	public function testYearlyByMonthBySetPos() {		
		$rule = "FREQ=YEARLY;INTERVAL=1;COUNT=4;BYMONTH=1,10";
		$this->parser->parseRule($rule, $this->dtstart, $this->startTime, $this->endTimeInfinity);
		
		$expected = "2012-01-14T20:00:00+00:00_2012-10-14T20:00:00+00:00_2013-01-14T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
        
        public function testYearlyByMonthBySetPos2() {		
		$rule = "FREQ=YEARLY;INTERVAL=2;COUNT=4;BYMONTH=11,12;BYDAY=1WE";
		$this->parser->parseRule($rule, "20111102T200000", $this->startTime, $this->endTimeInfinity);
		
		$expected = "2011-12-07T20:00:00+00:00_2013-11-06T20:00:00+00:00_2013-12-04T20:00:00+00:00_";
		
		$this->assertEquals($expected, $this->parser->serializeStartTimesArray() );
	}
}

?>
